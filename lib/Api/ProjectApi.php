<?php
/**
 * ProjectApi
 * PHP version 5
 *
 * @category Class
 * @package  Swagger\Client
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */

/**
 * Stash API
 *
 * REST-ish endpoint for interacting with Stash
 *
 * OpenAPI spec version: 1.0
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 *
 */

/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace Swagger\Client\Api;

use \Swagger\Client\ApiClient;
use \Swagger\Client\ApiException;
use \Swagger\Client\Configuration;
use \Swagger\Client\ObjectSerializer;

/**
 * ProjectApi Class Doc Comment
 *
 * @category Class
 * @package  Swagger\Client
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */
class ProjectApi
{
    /**
     * API Client
     *
     * @var \Swagger\Client\ApiClient instance of the ApiClient
     */
    protected $apiClient;

    /**
     * Constructor
     *
     * @param \Swagger\Client\ApiClient|null $apiClient The api client to use
     */
    public function __construct(\Swagger\Client\ApiClient $apiClient = null)
    {
        if ($apiClient === null) {
            $apiClient = new ApiClient();
        }

        $this->apiClient = $apiClient;
    }

    /**
     * Get API client
     *
     * @return \Swagger\Client\ApiClient get the API client
     */
    public function getApiClient()
    {
        return $this->apiClient;
    }

    /**
     * Set the API client
     *
     * @param \Swagger\Client\ApiClient $apiClient set the API client
     *
     * @return ProjectApi
     */
    public function setApiClient(\Swagger\Client\ApiClient $apiClient)
    {
        $this->apiClient = $apiClient;
        return $this;
    }

    /**
     * Operation createProject
     *
     * createProject
     *
     * @param object $dynamic  (required)
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @return string
     */
    public function createProject($dynamic)
    {
        list($response) = $this->createProjectWithHttpInfo($dynamic);
        return $response;
    }

    /**
     * Operation createProjectWithHttpInfo
     *
     * createProject
     *
     * @param object $dynamic  (required)
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @return array of string, HTTP status code, HTTP response headers (array of strings)
     */
    public function createProjectWithHttpInfo($dynamic)
    {
        // verify the required parameter 'dynamic' is set
        if ($dynamic === null) {
            throw new \InvalidArgumentException('Missing the required parameter $dynamic when calling createProject');
        }
        // parse inputs
        $resourcePath = "/api/1.0/projects";
        $httpBody = '';
        $queryParams = [];
        $headerParams = [];
        $formParams = [];
        $_header_accept = $this->apiClient->selectHeaderAccept(['application/json']);
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = $this->apiClient->selectHeaderContentType(['application/json']);

        // default format to json
        $resourcePath = str_replace("{format}", "json", $resourcePath);

        // body params
        $_tempBody = null;
        if (isset($dynamic)) {
            $_tempBody = $dynamic;
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        // this endpoint requires HTTP basic authentication
        if (strlen($this->apiClient->getConfig()->getUsername()) !== 0 or strlen($this->apiClient->getConfig()->getPassword()) !== 0) {
            $headerParams['Authorization'] = 'Basic ' . base64_encode($this->apiClient->getConfig()->getUsername() . ":" . $this->apiClient->getConfig()->getPassword());
        }
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath,
                'POST',
                $queryParams,
                $httpBody,
                $headerParams,
                'string',
                '/api/1.0/projects'
            );

            return [$this->apiClient->getSerializer()->deserialize($response, 'string', $httpHeader), $statusCode, $httpHeader];
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), 'string', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
            }

            throw $e;
        }
    }

    /**
     * Operation deleteProject
     *
     * deleteProject
     *
     * @param string $project_key  (required)
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @return string
     */
    public function deleteProject($project_key)
    {
        list($response) = $this->deleteProjectWithHttpInfo($project_key);
        return $response;
    }

    /**
     * Operation deleteProjectWithHttpInfo
     *
     * deleteProject
     *
     * @param string $project_key  (required)
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @return array of string, HTTP status code, HTTP response headers (array of strings)
     */
    public function deleteProjectWithHttpInfo($project_key)
    {
        // verify the required parameter 'project_key' is set
        if ($project_key === null) {
            throw new \InvalidArgumentException('Missing the required parameter $project_key when calling deleteProject');
        }
        // parse inputs
        $resourcePath = "/api/1.0/projects/{projectKey}";
        $httpBody = '';
        $queryParams = [];
        $headerParams = [];
        $formParams = [];
        $_header_accept = $this->apiClient->selectHeaderAccept(['application/json']);
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = $this->apiClient->selectHeaderContentType(['application/json']);

        // path params
        if ($project_key !== null) {
            $resourcePath = str_replace(
                "{" . "projectKey" . "}",
                $this->apiClient->getSerializer()->toPathValue($project_key),
                $resourcePath
            );
        }
        // default format to json
        $resourcePath = str_replace("{format}", "json", $resourcePath);

        
        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        // this endpoint requires HTTP basic authentication
        if (strlen($this->apiClient->getConfig()->getUsername()) !== 0 or strlen($this->apiClient->getConfig()->getPassword()) !== 0) {
            $headerParams['Authorization'] = 'Basic ' . base64_encode($this->apiClient->getConfig()->getUsername() . ":" . $this->apiClient->getConfig()->getPassword());
        }
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath,
                'DELETE',
                $queryParams,
                $httpBody,
                $headerParams,
                'string',
                '/api/1.0/projects/{projectKey}'
            );

            return [$this->apiClient->getSerializer()->deserialize($response, 'string', $httpHeader), $statusCode, $httpHeader];
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), 'string', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
            }

            throw $e;
        }
    }

    /**
     * Operation getProject
     *
     * getProject
     *
     * @param string $project_key  (required)
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @return string
     */
    public function getProject($project_key)
    {
        list($response) = $this->getProjectWithHttpInfo($project_key);
        return $response;
    }

    /**
     * Operation getProjectWithHttpInfo
     *
     * getProject
     *
     * @param string $project_key  (required)
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @return array of string, HTTP status code, HTTP response headers (array of strings)
     */
    public function getProjectWithHttpInfo($project_key)
    {
        // verify the required parameter 'project_key' is set
        if ($project_key === null) {
            throw new \InvalidArgumentException('Missing the required parameter $project_key when calling getProject');
        }
        // parse inputs
        $resourcePath = "/api/1.0/projects/{projectKey}";
        $httpBody = '';
        $queryParams = [];
        $headerParams = [];
        $formParams = [];
        $_header_accept = $this->apiClient->selectHeaderAccept(['application/json']);
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = $this->apiClient->selectHeaderContentType(['application/json']);

        // path params
        if ($project_key !== null) {
            $resourcePath = str_replace(
                "{" . "projectKey" . "}",
                $this->apiClient->getSerializer()->toPathValue($project_key),
                $resourcePath
            );
        }
        // default format to json
        $resourcePath = str_replace("{format}", "json", $resourcePath);

        
        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        // this endpoint requires HTTP basic authentication
        if (strlen($this->apiClient->getConfig()->getUsername()) !== 0 or strlen($this->apiClient->getConfig()->getPassword()) !== 0) {
            $headerParams['Authorization'] = 'Basic ' . base64_encode($this->apiClient->getConfig()->getUsername() . ":" . $this->apiClient->getConfig()->getPassword());
        }
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath,
                'GET',
                $queryParams,
                $httpBody,
                $headerParams,
                'string',
                '/api/1.0/projects/{projectKey}'
            );

            return [$this->apiClient->getSerializer()->deserialize($response, 'string', $httpHeader), $statusCode, $httpHeader];
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), 'string', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
            }

            throw $e;
        }
    }

    /**
     * Operation getProjectAvatar
     *
     * getProjectAvatar
     *
     * @param string $project_key  (required)
     * @param int $s The desired size of the image. The server will return an image as close as possible to the specified              size. (optional, default to 0)
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @return string
     */
    public function getProjectAvatar($project_key, $s = null)
    {
        list($response) = $this->getProjectAvatarWithHttpInfo($project_key, $s);
        return $response;
    }

    /**
     * Operation getProjectAvatarWithHttpInfo
     *
     * getProjectAvatar
     *
     * @param string $project_key  (required)
     * @param int $s The desired size of the image. The server will return an image as close as possible to the specified              size. (optional, default to 0)
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @return array of string, HTTP status code, HTTP response headers (array of strings)
     */
    public function getProjectAvatarWithHttpInfo($project_key, $s = null)
    {
        // verify the required parameter 'project_key' is set
        if ($project_key === null) {
            throw new \InvalidArgumentException('Missing the required parameter $project_key when calling getProjectAvatar');
        }
        // parse inputs
        $resourcePath = "/api/1.0/projects/{projectKey}/avatar.png";
        $httpBody = '';
        $queryParams = [];
        $headerParams = [];
        $formParams = [];
        $_header_accept = $this->apiClient->selectHeaderAccept(['application/json']);
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = $this->apiClient->selectHeaderContentType(['application/json']);

        // query params
        if ($s !== null) {
            $queryParams['s'] = $this->apiClient->getSerializer()->toQueryValue($s);
        }
        // path params
        if ($project_key !== null) {
            $resourcePath = str_replace(
                "{" . "projectKey" . "}",
                $this->apiClient->getSerializer()->toPathValue($project_key),
                $resourcePath
            );
        }
        // default format to json
        $resourcePath = str_replace("{format}", "json", $resourcePath);

        
        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        // this endpoint requires HTTP basic authentication
        if (strlen($this->apiClient->getConfig()->getUsername()) !== 0 or strlen($this->apiClient->getConfig()->getPassword()) !== 0) {
            $headerParams['Authorization'] = 'Basic ' . base64_encode($this->apiClient->getConfig()->getUsername() . ":" . $this->apiClient->getConfig()->getPassword());
        }
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath,
                'GET',
                $queryParams,
                $httpBody,
                $headerParams,
                'string',
                '/api/1.0/projects/{projectKey}/avatar.png'
            );

            return [$this->apiClient->getSerializer()->deserialize($response, 'string', $httpHeader), $statusCode, $httpHeader];
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), 'string', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
            }

            throw $e;
        }
    }

    /**
     * Operation getProjectGroupsWithAnyPermission
     *
     * getProjectGroupsWithAnyPermission
     *
     * @param string $project_key  (required)
     * @param string $filter if specified only group names containing the supplied string will be returned (optional)
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @return string
     */
    public function getProjectGroupsWithAnyPermission($project_key, $filter = null)
    {
        list($response) = $this->getProjectGroupsWithAnyPermissionWithHttpInfo($project_key, $filter);
        return $response;
    }

    /**
     * Operation getProjectGroupsWithAnyPermissionWithHttpInfo
     *
     * getProjectGroupsWithAnyPermission
     *
     * @param string $project_key  (required)
     * @param string $filter if specified only group names containing the supplied string will be returned (optional)
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @return array of string, HTTP status code, HTTP response headers (array of strings)
     */
    public function getProjectGroupsWithAnyPermissionWithHttpInfo($project_key, $filter = null)
    {
        // verify the required parameter 'project_key' is set
        if ($project_key === null) {
            throw new \InvalidArgumentException('Missing the required parameter $project_key when calling getProjectGroupsWithAnyPermission');
        }
        // parse inputs
        $resourcePath = "/api/1.0/projects/{projectKey}/permissions/groups";
        $httpBody = '';
        $queryParams = [];
        $headerParams = [];
        $formParams = [];
        $_header_accept = $this->apiClient->selectHeaderAccept(['application/json']);
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = $this->apiClient->selectHeaderContentType(['application/json']);

        // query params
        if ($filter !== null) {
            $queryParams['filter'] = $this->apiClient->getSerializer()->toQueryValue($filter);
        }
        // path params
        if ($project_key !== null) {
            $resourcePath = str_replace(
                "{" . "projectKey" . "}",
                $this->apiClient->getSerializer()->toPathValue($project_key),
                $resourcePath
            );
        }
        // default format to json
        $resourcePath = str_replace("{format}", "json", $resourcePath);

        
        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        // this endpoint requires HTTP basic authentication
        if (strlen($this->apiClient->getConfig()->getUsername()) !== 0 or strlen($this->apiClient->getConfig()->getPassword()) !== 0) {
            $headerParams['Authorization'] = 'Basic ' . base64_encode($this->apiClient->getConfig()->getUsername() . ":" . $this->apiClient->getConfig()->getPassword());
        }
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath,
                'GET',
                $queryParams,
                $httpBody,
                $headerParams,
                'string',
                '/api/1.0/projects/{projectKey}/permissions/groups'
            );

            return [$this->apiClient->getSerializer()->deserialize($response, 'string', $httpHeader), $statusCode, $httpHeader];
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), 'string', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
            }

            throw $e;
        }
    }

    /**
     * Operation getProjectGroupsWithoutAnyPermission
     *
     * getProjectGroupsWithoutAnyPermission
     *
     * @param string $project_key  (required)
     * @param string $filter if specified only group names containing the supplied string will be returned (optional)
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @return string
     */
    public function getProjectGroupsWithoutAnyPermission($project_key, $filter = null)
    {
        list($response) = $this->getProjectGroupsWithoutAnyPermissionWithHttpInfo($project_key, $filter);
        return $response;
    }

    /**
     * Operation getProjectGroupsWithoutAnyPermissionWithHttpInfo
     *
     * getProjectGroupsWithoutAnyPermission
     *
     * @param string $project_key  (required)
     * @param string $filter if specified only group names containing the supplied string will be returned (optional)
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @return array of string, HTTP status code, HTTP response headers (array of strings)
     */
    public function getProjectGroupsWithoutAnyPermissionWithHttpInfo($project_key, $filter = null)
    {
        // verify the required parameter 'project_key' is set
        if ($project_key === null) {
            throw new \InvalidArgumentException('Missing the required parameter $project_key when calling getProjectGroupsWithoutAnyPermission');
        }
        // parse inputs
        $resourcePath = "/api/1.0/projects/{projectKey}/permissions/groups/none";
        $httpBody = '';
        $queryParams = [];
        $headerParams = [];
        $formParams = [];
        $_header_accept = $this->apiClient->selectHeaderAccept(['application/json']);
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = $this->apiClient->selectHeaderContentType(['application/json']);

        // query params
        if ($filter !== null) {
            $queryParams['filter'] = $this->apiClient->getSerializer()->toQueryValue($filter);
        }
        // path params
        if ($project_key !== null) {
            $resourcePath = str_replace(
                "{" . "projectKey" . "}",
                $this->apiClient->getSerializer()->toPathValue($project_key),
                $resourcePath
            );
        }
        // default format to json
        $resourcePath = str_replace("{format}", "json", $resourcePath);

        
        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        // this endpoint requires HTTP basic authentication
        if (strlen($this->apiClient->getConfig()->getUsername()) !== 0 or strlen($this->apiClient->getConfig()->getPassword()) !== 0) {
            $headerParams['Authorization'] = 'Basic ' . base64_encode($this->apiClient->getConfig()->getUsername() . ":" . $this->apiClient->getConfig()->getPassword());
        }
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath,
                'GET',
                $queryParams,
                $httpBody,
                $headerParams,
                'string',
                '/api/1.0/projects/{projectKey}/permissions/groups/none'
            );

            return [$this->apiClient->getSerializer()->deserialize($response, 'string', $httpHeader), $statusCode, $httpHeader];
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), 'string', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
            }

            throw $e;
        }
    }

    /**
     * Operation getProjectUsersWithAnyPermission
     *
     * getProjectUsersWithAnyPermission
     *
     * @param string $project_key  (required)
     * @param string $filter if specified only group names containing the supplied string will be returned (optional)
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @return string
     */
    public function getProjectUsersWithAnyPermission($project_key, $filter = null)
    {
        list($response) = $this->getProjectUsersWithAnyPermissionWithHttpInfo($project_key, $filter);
        return $response;
    }

    /**
     * Operation getProjectUsersWithAnyPermissionWithHttpInfo
     *
     * getProjectUsersWithAnyPermission
     *
     * @param string $project_key  (required)
     * @param string $filter if specified only group names containing the supplied string will be returned (optional)
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @return array of string, HTTP status code, HTTP response headers (array of strings)
     */
    public function getProjectUsersWithAnyPermissionWithHttpInfo($project_key, $filter = null)
    {
        // verify the required parameter 'project_key' is set
        if ($project_key === null) {
            throw new \InvalidArgumentException('Missing the required parameter $project_key when calling getProjectUsersWithAnyPermission');
        }
        // parse inputs
        $resourcePath = "/api/1.0/projects/{projectKey}/permissions/users";
        $httpBody = '';
        $queryParams = [];
        $headerParams = [];
        $formParams = [];
        $_header_accept = $this->apiClient->selectHeaderAccept(['application/json']);
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = $this->apiClient->selectHeaderContentType(['application/json']);

        // query params
        if ($filter !== null) {
            $queryParams['filter'] = $this->apiClient->getSerializer()->toQueryValue($filter);
        }
        // path params
        if ($project_key !== null) {
            $resourcePath = str_replace(
                "{" . "projectKey" . "}",
                $this->apiClient->getSerializer()->toPathValue($project_key),
                $resourcePath
            );
        }
        // default format to json
        $resourcePath = str_replace("{format}", "json", $resourcePath);

        
        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        // this endpoint requires HTTP basic authentication
        if (strlen($this->apiClient->getConfig()->getUsername()) !== 0 or strlen($this->apiClient->getConfig()->getPassword()) !== 0) {
            $headerParams['Authorization'] = 'Basic ' . base64_encode($this->apiClient->getConfig()->getUsername() . ":" . $this->apiClient->getConfig()->getPassword());
        }
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath,
                'GET',
                $queryParams,
                $httpBody,
                $headerParams,
                'string',
                '/api/1.0/projects/{projectKey}/permissions/users'
            );

            return [$this->apiClient->getSerializer()->deserialize($response, 'string', $httpHeader), $statusCode, $httpHeader];
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), 'string', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
            }

            throw $e;
        }
    }

    /**
     * Operation getProjectUsersWithoutPermission
     *
     * getProjectUsersWithoutPermission
     *
     * @param string $project_key  (required)
     * @param string $filter if specified only group names containing the supplied string will be returned (optional)
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @return string
     */
    public function getProjectUsersWithoutPermission($project_key, $filter = null)
    {
        list($response) = $this->getProjectUsersWithoutPermissionWithHttpInfo($project_key, $filter);
        return $response;
    }

    /**
     * Operation getProjectUsersWithoutPermissionWithHttpInfo
     *
     * getProjectUsersWithoutPermission
     *
     * @param string $project_key  (required)
     * @param string $filter if specified only group names containing the supplied string will be returned (optional)
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @return array of string, HTTP status code, HTTP response headers (array of strings)
     */
    public function getProjectUsersWithoutPermissionWithHttpInfo($project_key, $filter = null)
    {
        // verify the required parameter 'project_key' is set
        if ($project_key === null) {
            throw new \InvalidArgumentException('Missing the required parameter $project_key when calling getProjectUsersWithoutPermission');
        }
        // parse inputs
        $resourcePath = "/api/1.0/projects/{projectKey}/permissions/users/none";
        $httpBody = '';
        $queryParams = [];
        $headerParams = [];
        $formParams = [];
        $_header_accept = $this->apiClient->selectHeaderAccept(['application/json']);
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = $this->apiClient->selectHeaderContentType(['application/json']);

        // query params
        if ($filter !== null) {
            $queryParams['filter'] = $this->apiClient->getSerializer()->toQueryValue($filter);
        }
        // path params
        if ($project_key !== null) {
            $resourcePath = str_replace(
                "{" . "projectKey" . "}",
                $this->apiClient->getSerializer()->toPathValue($project_key),
                $resourcePath
            );
        }
        // default format to json
        $resourcePath = str_replace("{format}", "json", $resourcePath);

        
        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        // this endpoint requires HTTP basic authentication
        if (strlen($this->apiClient->getConfig()->getUsername()) !== 0 or strlen($this->apiClient->getConfig()->getPassword()) !== 0) {
            $headerParams['Authorization'] = 'Basic ' . base64_encode($this->apiClient->getConfig()->getUsername() . ":" . $this->apiClient->getConfig()->getPassword());
        }
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath,
                'GET',
                $queryParams,
                $httpBody,
                $headerParams,
                'string',
                '/api/1.0/projects/{projectKey}/permissions/users/none'
            );

            return [$this->apiClient->getSerializer()->deserialize($response, 'string', $httpHeader), $statusCode, $httpHeader];
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), 'string', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
            }

            throw $e;
        }
    }

    /**
     * Operation getProjects
     *
     * getProjects
     *
     * @param string $name  (optional)
     * @param string $permission  (optional)
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @return string
     */
    public function getProjects($name = null, $permission = null)
    {
        list($response) = $this->getProjectsWithHttpInfo($name, $permission);
        return $response;
    }

    /**
     * Operation getProjectsWithHttpInfo
     *
     * getProjects
     *
     * @param string $name  (optional)
     * @param string $permission  (optional)
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @return array of string, HTTP status code, HTTP response headers (array of strings)
     */
    public function getProjectsWithHttpInfo($name = null, $permission = null)
    {
        // parse inputs
        $resourcePath = "/api/1.0/projects";
        $httpBody = '';
        $queryParams = [];
        $headerParams = [];
        $formParams = [];
        $_header_accept = $this->apiClient->selectHeaderAccept(['application/json']);
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = $this->apiClient->selectHeaderContentType(['application/json']);

        // query params
        if ($name !== null) {
            $queryParams['name'] = $this->apiClient->getSerializer()->toQueryValue($name);
        }
        // query params
        if ($permission !== null) {
            $queryParams['permission'] = $this->apiClient->getSerializer()->toQueryValue($permission);
        }
        // default format to json
        $resourcePath = str_replace("{format}", "json", $resourcePath);

        
        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        // this endpoint requires HTTP basic authentication
        if (strlen($this->apiClient->getConfig()->getUsername()) !== 0 or strlen($this->apiClient->getConfig()->getPassword()) !== 0) {
            $headerParams['Authorization'] = 'Basic ' . base64_encode($this->apiClient->getConfig()->getUsername() . ":" . $this->apiClient->getConfig()->getPassword());
        }
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath,
                'GET',
                $queryParams,
                $httpBody,
                $headerParams,
                'string',
                '/api/1.0/projects'
            );

            return [$this->apiClient->getSerializer()->deserialize($response, 'string', $httpHeader), $statusCode, $httpHeader];
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), 'string', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
            }

            throw $e;
        }
    }

    /**
     * Operation hasProjectAllUserPermission
     *
     * hasProjectAllUserPermission
     *
     * @param string $project_key  (required)
     * @param string $permission the permission to grant (required)
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @return string
     */
    public function hasProjectAllUserPermission($project_key, $permission)
    {
        list($response) = $this->hasProjectAllUserPermissionWithHttpInfo($project_key, $permission);
        return $response;
    }

    /**
     * Operation hasProjectAllUserPermissionWithHttpInfo
     *
     * hasProjectAllUserPermission
     *
     * @param string $project_key  (required)
     * @param string $permission the permission to grant (required)
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @return array of string, HTTP status code, HTTP response headers (array of strings)
     */
    public function hasProjectAllUserPermissionWithHttpInfo($project_key, $permission)
    {
        // verify the required parameter 'project_key' is set
        if ($project_key === null) {
            throw new \InvalidArgumentException('Missing the required parameter $project_key when calling hasProjectAllUserPermission');
        }
        // verify the required parameter 'permission' is set
        if ($permission === null) {
            throw new \InvalidArgumentException('Missing the required parameter $permission when calling hasProjectAllUserPermission');
        }
        // parse inputs
        $resourcePath = "/api/1.0/projects/{projectKey}/permissions/{permission}/all";
        $httpBody = '';
        $queryParams = [];
        $headerParams = [];
        $formParams = [];
        $_header_accept = $this->apiClient->selectHeaderAccept(['application/json']);
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = $this->apiClient->selectHeaderContentType(['application/json']);

        // path params
        if ($project_key !== null) {
            $resourcePath = str_replace(
                "{" . "projectKey" . "}",
                $this->apiClient->getSerializer()->toPathValue($project_key),
                $resourcePath
            );
        }
        // path params
        if ($permission !== null) {
            $resourcePath = str_replace(
                "{" . "permission" . "}",
                $this->apiClient->getSerializer()->toPathValue($permission),
                $resourcePath
            );
        }
        // default format to json
        $resourcePath = str_replace("{format}", "json", $resourcePath);

        
        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        // this endpoint requires HTTP basic authentication
        if (strlen($this->apiClient->getConfig()->getUsername()) !== 0 or strlen($this->apiClient->getConfig()->getPassword()) !== 0) {
            $headerParams['Authorization'] = 'Basic ' . base64_encode($this->apiClient->getConfig()->getUsername() . ":" . $this->apiClient->getConfig()->getPassword());
        }
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath,
                'GET',
                $queryParams,
                $httpBody,
                $headerParams,
                'string',
                '/api/1.0/projects/{projectKey}/permissions/{permission}/all'
            );

            return [$this->apiClient->getSerializer()->deserialize($response, 'string', $httpHeader), $statusCode, $httpHeader];
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), 'string', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
            }

            throw $e;
        }
    }

    /**
     * Operation modifyProjectAllUserPermission
     *
     * modifyProjectAllUserPermission
     *
     * @param string $project_key  (required)
     * @param string $permission the permission to grant (required)
     * @param bool $allow &lt;em&gt;true&lt;/em&gt; to grant the specified permission to all users, or &lt;em&gt;false&lt;/em&gt; to revoke it (optional)
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @return string
     */
    public function modifyProjectAllUserPermission($project_key, $permission, $allow = null)
    {
        list($response) = $this->modifyProjectAllUserPermissionWithHttpInfo($project_key, $permission, $allow);
        return $response;
    }

    /**
     * Operation modifyProjectAllUserPermissionWithHttpInfo
     *
     * modifyProjectAllUserPermission
     *
     * @param string $project_key  (required)
     * @param string $permission the permission to grant (required)
     * @param bool $allow &lt;em&gt;true&lt;/em&gt; to grant the specified permission to all users, or &lt;em&gt;false&lt;/em&gt; to revoke it (optional)
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @return array of string, HTTP status code, HTTP response headers (array of strings)
     */
    public function modifyProjectAllUserPermissionWithHttpInfo($project_key, $permission, $allow = null)
    {
        // verify the required parameter 'project_key' is set
        if ($project_key === null) {
            throw new \InvalidArgumentException('Missing the required parameter $project_key when calling modifyProjectAllUserPermission');
        }
        // verify the required parameter 'permission' is set
        if ($permission === null) {
            throw new \InvalidArgumentException('Missing the required parameter $permission when calling modifyProjectAllUserPermission');
        }
        // parse inputs
        $resourcePath = "/api/1.0/projects/{projectKey}/permissions/{permission}/all";
        $httpBody = '';
        $queryParams = [];
        $headerParams = [];
        $formParams = [];
        $_header_accept = $this->apiClient->selectHeaderAccept(['application/json']);
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = $this->apiClient->selectHeaderContentType(['application/json']);

        // query params
        if ($allow !== null) {
            $queryParams['allow'] = $this->apiClient->getSerializer()->toQueryValue($allow);
        }
        // path params
        if ($project_key !== null) {
            $resourcePath = str_replace(
                "{" . "projectKey" . "}",
                $this->apiClient->getSerializer()->toPathValue($project_key),
                $resourcePath
            );
        }
        // path params
        if ($permission !== null) {
            $resourcePath = str_replace(
                "{" . "permission" . "}",
                $this->apiClient->getSerializer()->toPathValue($permission),
                $resourcePath
            );
        }
        // default format to json
        $resourcePath = str_replace("{format}", "json", $resourcePath);

        
        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        // this endpoint requires HTTP basic authentication
        if (strlen($this->apiClient->getConfig()->getUsername()) !== 0 or strlen($this->apiClient->getConfig()->getPassword()) !== 0) {
            $headerParams['Authorization'] = 'Basic ' . base64_encode($this->apiClient->getConfig()->getUsername() . ":" . $this->apiClient->getConfig()->getPassword());
        }
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath,
                'POST',
                $queryParams,
                $httpBody,
                $headerParams,
                'string',
                '/api/1.0/projects/{projectKey}/permissions/{permission}/all'
            );

            return [$this->apiClient->getSerializer()->deserialize($response, 'string', $httpHeader), $statusCode, $httpHeader];
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), 'string', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
            }

            throw $e;
        }
    }

    /**
     * Operation revokeProjectPermissionsForGroup
     *
     * revokeProjectPermissionsForGroup
     *
     * @param string $project_key  (required)
     * @param string $name the name of the group (optional)
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @return string
     */
    public function revokeProjectPermissionsForGroup($project_key, $name = null)
    {
        list($response) = $this->revokeProjectPermissionsForGroupWithHttpInfo($project_key, $name);
        return $response;
    }

    /**
     * Operation revokeProjectPermissionsForGroupWithHttpInfo
     *
     * revokeProjectPermissionsForGroup
     *
     * @param string $project_key  (required)
     * @param string $name the name of the group (optional)
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @return array of string, HTTP status code, HTTP response headers (array of strings)
     */
    public function revokeProjectPermissionsForGroupWithHttpInfo($project_key, $name = null)
    {
        // verify the required parameter 'project_key' is set
        if ($project_key === null) {
            throw new \InvalidArgumentException('Missing the required parameter $project_key when calling revokeProjectPermissionsForGroup');
        }
        // parse inputs
        $resourcePath = "/api/1.0/projects/{projectKey}/permissions/groups";
        $httpBody = '';
        $queryParams = [];
        $headerParams = [];
        $formParams = [];
        $_header_accept = $this->apiClient->selectHeaderAccept(['application/json']);
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = $this->apiClient->selectHeaderContentType(['application/json']);

        // query params
        if ($name !== null) {
            $queryParams['name'] = $this->apiClient->getSerializer()->toQueryValue($name);
        }
        // path params
        if ($project_key !== null) {
            $resourcePath = str_replace(
                "{" . "projectKey" . "}",
                $this->apiClient->getSerializer()->toPathValue($project_key),
                $resourcePath
            );
        }
        // default format to json
        $resourcePath = str_replace("{format}", "json", $resourcePath);

        
        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        // this endpoint requires HTTP basic authentication
        if (strlen($this->apiClient->getConfig()->getUsername()) !== 0 or strlen($this->apiClient->getConfig()->getPassword()) !== 0) {
            $headerParams['Authorization'] = 'Basic ' . base64_encode($this->apiClient->getConfig()->getUsername() . ":" . $this->apiClient->getConfig()->getPassword());
        }
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath,
                'DELETE',
                $queryParams,
                $httpBody,
                $headerParams,
                'string',
                '/api/1.0/projects/{projectKey}/permissions/groups'
            );

            return [$this->apiClient->getSerializer()->deserialize($response, 'string', $httpHeader), $statusCode, $httpHeader];
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), 'string', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
            }

            throw $e;
        }
    }

    /**
     * Operation revokeProjectPermissionsForUser
     *
     * revokeProjectPermissionsForUser
     *
     * @param string $project_key  (required)
     * @param string $name the name of the user (optional)
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @return string
     */
    public function revokeProjectPermissionsForUser($project_key, $name = null)
    {
        list($response) = $this->revokeProjectPermissionsForUserWithHttpInfo($project_key, $name);
        return $response;
    }

    /**
     * Operation revokeProjectPermissionsForUserWithHttpInfo
     *
     * revokeProjectPermissionsForUser
     *
     * @param string $project_key  (required)
     * @param string $name the name of the user (optional)
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @return array of string, HTTP status code, HTTP response headers (array of strings)
     */
    public function revokeProjectPermissionsForUserWithHttpInfo($project_key, $name = null)
    {
        // verify the required parameter 'project_key' is set
        if ($project_key === null) {
            throw new \InvalidArgumentException('Missing the required parameter $project_key when calling revokeProjectPermissionsForUser');
        }
        // parse inputs
        $resourcePath = "/api/1.0/projects/{projectKey}/permissions/users";
        $httpBody = '';
        $queryParams = [];
        $headerParams = [];
        $formParams = [];
        $_header_accept = $this->apiClient->selectHeaderAccept(['application/json']);
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = $this->apiClient->selectHeaderContentType(['application/json']);

        // query params
        if ($name !== null) {
            $queryParams['name'] = $this->apiClient->getSerializer()->toQueryValue($name);
        }
        // path params
        if ($project_key !== null) {
            $resourcePath = str_replace(
                "{" . "projectKey" . "}",
                $this->apiClient->getSerializer()->toPathValue($project_key),
                $resourcePath
            );
        }
        // default format to json
        $resourcePath = str_replace("{format}", "json", $resourcePath);

        
        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        // this endpoint requires HTTP basic authentication
        if (strlen($this->apiClient->getConfig()->getUsername()) !== 0 or strlen($this->apiClient->getConfig()->getPassword()) !== 0) {
            $headerParams['Authorization'] = 'Basic ' . base64_encode($this->apiClient->getConfig()->getUsername() . ":" . $this->apiClient->getConfig()->getPassword());
        }
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath,
                'DELETE',
                $queryParams,
                $httpBody,
                $headerParams,
                'string',
                '/api/1.0/projects/{projectKey}/permissions/users'
            );

            return [$this->apiClient->getSerializer()->deserialize($response, 'string', $httpHeader), $statusCode, $httpHeader];
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), 'string', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
            }

            throw $e;
        }
    }

    /**
     * Operation setProjectPermissionForGroups
     *
     * setProjectPermissionForGroups
     *
     * @param string $project_key  (required)
     * @param string $permission the permission to grant (optional)
     * @param string $name the names of the groups (optional)
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @return string
     */
    public function setProjectPermissionForGroups($project_key, $permission = null, $name = null)
    {
        list($response) = $this->setProjectPermissionForGroupsWithHttpInfo($project_key, $permission, $name);
        return $response;
    }

    /**
     * Operation setProjectPermissionForGroupsWithHttpInfo
     *
     * setProjectPermissionForGroups
     *
     * @param string $project_key  (required)
     * @param string $permission the permission to grant (optional)
     * @param string $name the names of the groups (optional)
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @return array of string, HTTP status code, HTTP response headers (array of strings)
     */
    public function setProjectPermissionForGroupsWithHttpInfo($project_key, $permission = null, $name = null)
    {
        // verify the required parameter 'project_key' is set
        if ($project_key === null) {
            throw new \InvalidArgumentException('Missing the required parameter $project_key when calling setProjectPermissionForGroups');
        }
        // parse inputs
        $resourcePath = "/api/1.0/projects/{projectKey}/permissions/groups";
        $httpBody = '';
        $queryParams = [];
        $headerParams = [];
        $formParams = [];
        $_header_accept = $this->apiClient->selectHeaderAccept(['application/json']);
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = $this->apiClient->selectHeaderContentType(['application/json']);

        // query params
        if ($permission !== null) {
            $queryParams['permission'] = $this->apiClient->getSerializer()->toQueryValue($permission);
        }
        // query params
        if ($name !== null) {
            $queryParams['name'] = $this->apiClient->getSerializer()->toQueryValue($name);
        }
        // path params
        if ($project_key !== null) {
            $resourcePath = str_replace(
                "{" . "projectKey" . "}",
                $this->apiClient->getSerializer()->toPathValue($project_key),
                $resourcePath
            );
        }
        // default format to json
        $resourcePath = str_replace("{format}", "json", $resourcePath);

        
        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        // this endpoint requires HTTP basic authentication
        if (strlen($this->apiClient->getConfig()->getUsername()) !== 0 or strlen($this->apiClient->getConfig()->getPassword()) !== 0) {
            $headerParams['Authorization'] = 'Basic ' . base64_encode($this->apiClient->getConfig()->getUsername() . ":" . $this->apiClient->getConfig()->getPassword());
        }
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath,
                'PUT',
                $queryParams,
                $httpBody,
                $headerParams,
                'string',
                '/api/1.0/projects/{projectKey}/permissions/groups'
            );

            return [$this->apiClient->getSerializer()->deserialize($response, 'string', $httpHeader), $statusCode, $httpHeader];
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), 'string', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
            }

            throw $e;
        }
    }

    /**
     * Operation setProjectPermissionForUsers
     *
     * setProjectPermissionForUsers
     *
     * @param string $project_key  (required)
     * @param string $name the names of the users (optional)
     * @param string $permission the permission to grant (optional)
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @return string
     */
    public function setProjectPermissionForUsers($project_key, $name = null, $permission = null)
    {
        list($response) = $this->setProjectPermissionForUsersWithHttpInfo($project_key, $name, $permission);
        return $response;
    }

    /**
     * Operation setProjectPermissionForUsersWithHttpInfo
     *
     * setProjectPermissionForUsers
     *
     * @param string $project_key  (required)
     * @param string $name the names of the users (optional)
     * @param string $permission the permission to grant (optional)
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @return array of string, HTTP status code, HTTP response headers (array of strings)
     */
    public function setProjectPermissionForUsersWithHttpInfo($project_key, $name = null, $permission = null)
    {
        // verify the required parameter 'project_key' is set
        if ($project_key === null) {
            throw new \InvalidArgumentException('Missing the required parameter $project_key when calling setProjectPermissionForUsers');
        }
        // parse inputs
        $resourcePath = "/api/1.0/projects/{projectKey}/permissions/users";
        $httpBody = '';
        $queryParams = [];
        $headerParams = [];
        $formParams = [];
        $_header_accept = $this->apiClient->selectHeaderAccept(['application/json']);
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = $this->apiClient->selectHeaderContentType(['application/json']);

        // query params
        if ($name !== null) {
            $queryParams['name'] = $this->apiClient->getSerializer()->toQueryValue($name);
        }
        // query params
        if ($permission !== null) {
            $queryParams['permission'] = $this->apiClient->getSerializer()->toQueryValue($permission);
        }
        // path params
        if ($project_key !== null) {
            $resourcePath = str_replace(
                "{" . "projectKey" . "}",
                $this->apiClient->getSerializer()->toPathValue($project_key),
                $resourcePath
            );
        }
        // default format to json
        $resourcePath = str_replace("{format}", "json", $resourcePath);

        
        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        // this endpoint requires HTTP basic authentication
        if (strlen($this->apiClient->getConfig()->getUsername()) !== 0 or strlen($this->apiClient->getConfig()->getPassword()) !== 0) {
            $headerParams['Authorization'] = 'Basic ' . base64_encode($this->apiClient->getConfig()->getUsername() . ":" . $this->apiClient->getConfig()->getPassword());
        }
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath,
                'PUT',
                $queryParams,
                $httpBody,
                $headerParams,
                'string',
                '/api/1.0/projects/{projectKey}/permissions/users'
            );

            return [$this->apiClient->getSerializer()->deserialize($response, 'string', $httpHeader), $statusCode, $httpHeader];
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), 'string', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
            }

            throw $e;
        }
    }

    /**
     * Operation updateProject
     *
     * updateProject
     *
     * @param object $dynamic  (required)
     * @param string $project_key  (required)
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @return string
     */
    public function updateProject($dynamic, $project_key)
    {
        list($response) = $this->updateProjectWithHttpInfo($dynamic, $project_key);
        return $response;
    }

    /**
     * Operation updateProjectWithHttpInfo
     *
     * updateProject
     *
     * @param object $dynamic  (required)
     * @param string $project_key  (required)
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @return array of string, HTTP status code, HTTP response headers (array of strings)
     */
    public function updateProjectWithHttpInfo($dynamic, $project_key)
    {
        // verify the required parameter 'dynamic' is set
        if ($dynamic === null) {
            throw new \InvalidArgumentException('Missing the required parameter $dynamic when calling updateProject');
        }
        // verify the required parameter 'project_key' is set
        if ($project_key === null) {
            throw new \InvalidArgumentException('Missing the required parameter $project_key when calling updateProject');
        }
        // parse inputs
        $resourcePath = "/api/1.0/projects/{projectKey}";
        $httpBody = '';
        $queryParams = [];
        $headerParams = [];
        $formParams = [];
        $_header_accept = $this->apiClient->selectHeaderAccept(['application/json']);
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = $this->apiClient->selectHeaderContentType(['application/json']);

        // path params
        if ($project_key !== null) {
            $resourcePath = str_replace(
                "{" . "projectKey" . "}",
                $this->apiClient->getSerializer()->toPathValue($project_key),
                $resourcePath
            );
        }
        // default format to json
        $resourcePath = str_replace("{format}", "json", $resourcePath);

        // body params
        $_tempBody = null;
        if (isset($dynamic)) {
            $_tempBody = $dynamic;
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        // this endpoint requires HTTP basic authentication
        if (strlen($this->apiClient->getConfig()->getUsername()) !== 0 or strlen($this->apiClient->getConfig()->getPassword()) !== 0) {
            $headerParams['Authorization'] = 'Basic ' . base64_encode($this->apiClient->getConfig()->getUsername() . ":" . $this->apiClient->getConfig()->getPassword());
        }
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath,
                'PUT',
                $queryParams,
                $httpBody,
                $headerParams,
                'string',
                '/api/1.0/projects/{projectKey}'
            );

            return [$this->apiClient->getSerializer()->deserialize($response, 'string', $httpHeader), $statusCode, $httpHeader];
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), 'string', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
            }

            throw $e;
        }
    }

    /**
     * Operation uploadProjectAvatar
     *
     * uploadProjectAvatar
     *
     * @param string $project_key  (required)
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @return string
     */
    public function uploadProjectAvatar($project_key)
    {
        list($response) = $this->uploadProjectAvatarWithHttpInfo($project_key);
        return $response;
    }

    /**
     * Operation uploadProjectAvatarWithHttpInfo
     *
     * uploadProjectAvatar
     *
     * @param string $project_key  (required)
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @return array of string, HTTP status code, HTTP response headers (array of strings)
     */
    public function uploadProjectAvatarWithHttpInfo($project_key)
    {
        // verify the required parameter 'project_key' is set
        if ($project_key === null) {
            throw new \InvalidArgumentException('Missing the required parameter $project_key when calling uploadProjectAvatar');
        }
        // parse inputs
        $resourcePath = "/api/1.0/projects/{projectKey}/avatar.png";
        $httpBody = '';
        $queryParams = [];
        $headerParams = [];
        $formParams = [];
        $_header_accept = $this->apiClient->selectHeaderAccept(['application/json']);
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = $this->apiClient->selectHeaderContentType(['application/json']);

        // path params
        if ($project_key !== null) {
            $resourcePath = str_replace(
                "{" . "projectKey" . "}",
                $this->apiClient->getSerializer()->toPathValue($project_key),
                $resourcePath
            );
        }
        // default format to json
        $resourcePath = str_replace("{format}", "json", $resourcePath);

        
        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        // this endpoint requires HTTP basic authentication
        if (strlen($this->apiClient->getConfig()->getUsername()) !== 0 or strlen($this->apiClient->getConfig()->getPassword()) !== 0) {
            $headerParams['Authorization'] = 'Basic ' . base64_encode($this->apiClient->getConfig()->getUsername() . ":" . $this->apiClient->getConfig()->getPassword());
        }
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath,
                'POST',
                $queryParams,
                $httpBody,
                $headerParams,
                'string',
                '/api/1.0/projects/{projectKey}/avatar.png'
            );

            return [$this->apiClient->getSerializer()->deserialize($response, 'string', $httpHeader), $statusCode, $httpHeader];
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), 'string', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
            }

            throw $e;
        }
    }
}
